
# class ChangePassword(UpdateView):
#     model = User
#     fields = ['password']
#     success_url = reverse_lazy('products')
#     template_name = 'change_password.html'
#
#     def get_object(self, queryset=None):
#         email = self.kwargs.get('email')
#         return self.model.objects.get(email=email)

class ChangePasswordView(PasswordChangeView):
    form_class = PasswordChangeForm
    success_url = reverse_lazy('products')
    template_name = 'change_password.html'



def verify_email_for_changing_password(request, email):
    if request.method == 'POST':
        user_otp = request.POST.get('otp_code')
        user = User.objects.get(email=email)
        otp = r.get(f'{user.id}')
        if otp == user_otp:
            user.is_active = True
            user.save()
            password = r.get(user.username)
            print(user.username, password)
            login(request, user)
            return redirect('change_password')
        else:
            return render(request, 'verify_email.html', {'error_message': 'invalid otp code.'})
    else:
        return render(request, 'verify_email.html')



class VerifyEmailForChangePassword(View):
    def get(self, request):
        return render(request, 'verify_email_for_changing_password.html')

    def post(self, request):
        email = request.POST.get('email', False)

        try:
            print('nenvekjrnfilwjkervnekjrnfveikjrnvekjdrnfd ')
            user = User.objects.get(email=email)
            otp_code = ''.join([str(randint(0, 9)) for _ in range(6)])
            print(otp_code)
            r.set(name=f"{user.id}", value=f"{otp_code}")
            subject = 'Verification code'
            message = f'Your verification code is: {otp_code}'
            email_from = settings.EMAIL_HOST_USER
            recipient_list = [email, ]
            send_mail(subject, message, email_from, recipient_list)
            return redirect(reverse('verify_email_for_changing_password', kwargs={'email': email}))
        except ObjectDoesNotExist:
            messages.error(request, "This email does not exist. You need to create an account first!")
            return render(request, 'verify_email_for_changing_password.html')

  path('change_password/', ChangePasswordView.as_view(), name="change_password"),
    path('verifyemailforchangingpassword/', VerifyEmailForChangePassword.as_view(), name="change_password_verify_email"),
    path('verify_email_for_changing_password/<str:email>/', verify_email_for_changing_password, name='verify_email_for_changing_password'),
